export function generateScript(path: string, modules: Array<string>) {
	return `// generated by Skycoder42/actions-setup-qt
function Controller() {
	console.log("#fn Controller");
	//installer.autoRejectMessageBoxes();
	installer.setMessageBoxAutomaticAnswer("installationErrorWithRetry", QMessageBox.Ignore);
	installer.installationFinished.connect(function() {
		gui.clickButton(buttons.NextButton, 1000);
	});
}

// Skip the welcome page
Controller.prototype.WelcomePageCallback = function() {
	console.log("#fn WelcomePageCallback");
	gui.clickButton(buttons.NextButton, 3000);
}

// skip the Qt Account credentials page
Controller.prototype.CredentialsPageCallback = function() {
	console.log("#fn CredentialsPageCallback");
	gui.clickButton(buttons.NextButton, 1000);
}

// skip the introduction page
Controller.prototype.IntroductionPageCallback = function() {
	console.log("#fn IntroductionPageCallback");
	gui.clickButton(buttons.NextButton, 1000);
}

// skip the obligations page
Controller.prototype.ObligationsPageCallback = function() {
	console.log("#fn ObligationsPageCallback");
	var page = gui.pageWidgetByObjectName("ObligationsPage");
	console.log(page);
	console.log(page.obligationsAgreement);
	page.obligationsAgreement.setChecked(true);
	page.completeChanged();
    gui.clickButton(buttons.NextButton, 1000);
}

// skip the telemetry page
Controller.prototype.DynamicTelemetryPluginFormCallback = function() {
	console.log("#fn DynamicTelemetryPluginFormCallback");
	gui.pageWidgetByObjectName("DynamicTelemetryPluginForm").statisticGroupBox.disableStatisticRadioButton.setChecked(true);
	gui.clickButton(buttons.NextButton, 1000);
}

// set the installation target directory
Controller.prototype.TargetDirectoryPageCallback = function() {
	console.log("#fn TargetDirectoryPageCallback");
	gui.currentPageWidget().TargetDirectoryLineEdit.setText("${path.replace(/\\/g, "/")}");
	gui.clickButton(buttons.NextButton, 1000);
}

// select the components to install
Controller.prototype.ComponentSelectionPageCallback = function() {
	console.log("#fn ComponentSelectionPageCallback");
	var widget = gui.currentPageWidget();
	widget.deselectAll();
	var groupBox = gui.findChild(widget, "CategoryGroupBox");
	gui.findChild(groupBox, "LTS").setChecked(true);
	gui.findChild(groupBox, "Latest releases").setChecked(true);
	gui.findChild(groupBox, "FetchCategoryButton").click();
	widget.deselectAll();
	var extraMods = ["${modules.join("\", \"")}"];
	extraMods.forEach(function(element){
		widget.selectComponent(element);
	});

	gui.clickButton(buttons.NextButton, 1000);
}

// accept the license agreement
Controller.prototype.LicenseAgreementPageCallback = function() {
	console.log("#fn LicenseAgreementPageCallback");
	gui.currentPageWidget().AcceptLicenseRadioButton.setChecked(true);
	gui.clickButton(buttons.NextButton, 1000);
}

// leave the start menu as it is
Controller.prototype.StartMenuDirectoryPageCallback = function() {
	console.log("#fn StartMenuDirectoryPageCallback");
	gui.clickButton(buttons.NextButton, 1000);
}

// install
Controller.prototype.ReadyForInstallationPageCallback = function() {
	console.log("#fn ReadyForInstallationPageCallback");
	gui.clickButton(buttons.NextButton, 1000);
}

// install
Controller.prototype.PerformInstallationPageCallback = function() {
	console.log("#fn PerformInstallationPageCallback");
	gui.clickButton(buttons.NextButton, 1000);
}

Controller.prototype.FinishedPageCallback = function() {
	console.log("#fn FinishedPageCallback");
	// do not launch QtCreator
	var checkBoxForm = gui.currentPageWidget().LaunchQtCreatorCheckBoxForm
	if (checkBoxForm && checkBoxForm.launchQtCreatorCheckBox)
		checkBoxForm.launchQtCreatorCheckBox.checked = false;
	gui.clickButton(buttons.FinishButton, 1000);
}
`;
}
